/*
Copyright (C) 2025 Intel Corporation
SPDX-License-Identifier: Apache-2.0
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1 "sigs.k8s.io/IOIsolation/api/ioi/v1"
)

// NodeIOStatusLister helps list NodeIOStatuses.
// All objects returned here must be treated as read-only.
type NodeIOStatusLister interface {
	// List lists all NodeIOStatuses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.NodeIOStatus, err error)
	// NodeIOStatuses returns an object that can list and get NodeIOStatuses.
	NodeIOStatuses(namespace string) NodeIOStatusNamespaceLister
	NodeIOStatusListerExpansion
}

// nodeIOStatusLister implements the NodeIOStatusLister interface.
type nodeIOStatusLister struct {
	indexer cache.Indexer
}

// NewNodeIOStatusLister returns a new NodeIOStatusLister.
func NewNodeIOStatusLister(indexer cache.Indexer) NodeIOStatusLister {
	return &nodeIOStatusLister{indexer: indexer}
}

// List lists all NodeIOStatuses in the indexer.
func (s *nodeIOStatusLister) List(selector labels.Selector) (ret []*v1.NodeIOStatus, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.NodeIOStatus))
	})
	return ret, err
}

// NodeIOStatuses returns an object that can list and get NodeIOStatuses.
func (s *nodeIOStatusLister) NodeIOStatuses(namespace string) NodeIOStatusNamespaceLister {
	return nodeIOStatusNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NodeIOStatusNamespaceLister helps list and get NodeIOStatuses.
// All objects returned here must be treated as read-only.
type NodeIOStatusNamespaceLister interface {
	// List lists all NodeIOStatuses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.NodeIOStatus, err error)
	// Get retrieves the NodeIOStatus from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.NodeIOStatus, error)
	NodeIOStatusNamespaceListerExpansion
}

// nodeIOStatusNamespaceLister implements the NodeIOStatusNamespaceLister
// interface.
type nodeIOStatusNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NodeIOStatuses in the indexer for a given namespace.
func (s nodeIOStatusNamespaceLister) List(selector labels.Selector) (ret []*v1.NodeIOStatus, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.NodeIOStatus))
	})
	return ret, err
}

// Get retrieves the NodeIOStatus from the indexer for a given namespace and name.
func (s nodeIOStatusNamespaceLister) Get(name string) (*v1.NodeIOStatus, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("nodeiostatus"), name)
	}
	return obj.(*v1.NodeIOStatus), nil
}

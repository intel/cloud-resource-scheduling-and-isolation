/*
Copyright (C) 2025 Intel Corporation
SPDX-License-Identifier: Apache-2.0
*/
// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
	v1 "sigs.k8s.io/IOIsolation/api/ioi/v1"
)

// FakeNodeIOStatuses implements NodeIOStatusInterface
type FakeNodeIOStatuses struct {
	Fake *FakeIoiV1
	ns   string
}

var nodeiostatusesResource = v1.SchemeGroupVersion.WithResource("nodeiostatuses")

var nodeiostatusesKind = v1.SchemeGroupVersion.WithKind("NodeIOStatus")

// Get takes name of the nodeIOStatus, and returns the corresponding nodeIOStatus object, and an error if there is any.
func (c *FakeNodeIOStatuses) Get(ctx context.Context, name string, options metav1.GetOptions) (result *v1.NodeIOStatus, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(nodeiostatusesResource, c.ns, name), &v1.NodeIOStatus{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.NodeIOStatus), err
}

// List takes label and field selectors, and returns the list of NodeIOStatuses that match those selectors.
func (c *FakeNodeIOStatuses) List(ctx context.Context, opts metav1.ListOptions) (result *v1.NodeIOStatusList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(nodeiostatusesResource, nodeiostatusesKind, c.ns, opts), &v1.NodeIOStatusList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1.NodeIOStatusList{ListMeta: obj.(*v1.NodeIOStatusList).ListMeta}
	for _, item := range obj.(*v1.NodeIOStatusList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested nodeIOStatuses.
func (c *FakeNodeIOStatuses) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(nodeiostatusesResource, c.ns, opts))

}

// Create takes the representation of a nodeIOStatus and creates it.  Returns the server's representation of the nodeIOStatus, and an error, if there is any.
func (c *FakeNodeIOStatuses) Create(ctx context.Context, nodeIOStatus *v1.NodeIOStatus, opts metav1.CreateOptions) (result *v1.NodeIOStatus, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(nodeiostatusesResource, c.ns, nodeIOStatus), &v1.NodeIOStatus{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.NodeIOStatus), err
}

// Update takes the representation of a nodeIOStatus and updates it. Returns the server's representation of the nodeIOStatus, and an error, if there is any.
func (c *FakeNodeIOStatuses) Update(ctx context.Context, nodeIOStatus *v1.NodeIOStatus, opts metav1.UpdateOptions) (result *v1.NodeIOStatus, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(nodeiostatusesResource, c.ns, nodeIOStatus), &v1.NodeIOStatus{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.NodeIOStatus), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeNodeIOStatuses) UpdateStatus(ctx context.Context, nodeIOStatus *v1.NodeIOStatus, opts metav1.UpdateOptions) (*v1.NodeIOStatus, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(nodeiostatusesResource, "status", c.ns, nodeIOStatus), &v1.NodeIOStatus{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.NodeIOStatus), err
}

// Delete takes name of the nodeIOStatus and deletes it. Returns an error if one occurs.
func (c *FakeNodeIOStatuses) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(nodeiostatusesResource, c.ns, name, opts), &v1.NodeIOStatus{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeNodeIOStatuses) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(nodeiostatusesResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1.NodeIOStatusList{})
	return err
}

// Patch applies the patch and returns the patched nodeIOStatus.
func (c *FakeNodeIOStatuses) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.NodeIOStatus, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(nodeiostatusesResource, c.ns, name, pt, data, subresources...), &v1.NodeIOStatus{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.NodeIOStatus), err
}

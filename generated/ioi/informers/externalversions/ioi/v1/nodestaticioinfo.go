/*
Copyright (C) 2025 Intel Corporation
SPDX-License-Identifier: Apache-2.0
*/
// Code generated by informer-gen. DO NOT EDIT.

package v1

import (
	"context"
	time "time"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
	ioiv1 "sigs.k8s.io/IOIsolation/api/ioi/v1"
	versioned "sigs.k8s.io/IOIsolation/generated/ioi/clientset/versioned"
	internalinterfaces "sigs.k8s.io/IOIsolation/generated/ioi/informers/externalversions/internalinterfaces"
	v1 "sigs.k8s.io/IOIsolation/generated/ioi/listers/ioi/v1"
)

// NodeStaticIOInfoInformer provides access to a shared informer and lister for
// NodeStaticIOInfos.
type NodeStaticIOInfoInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1.NodeStaticIOInfoLister
}

type nodeStaticIOInfoInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewNodeStaticIOInfoInformer constructs a new informer for NodeStaticIOInfo type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewNodeStaticIOInfoInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredNodeStaticIOInfoInformer(client, namespace, resyncPeriod, indexers, nil)
}

// NewFilteredNodeStaticIOInfoInformer constructs a new informer for NodeStaticIOInfo type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredNodeStaticIOInfoInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.IoiV1().NodeStaticIOInfos(namespace).List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.IoiV1().NodeStaticIOInfos(namespace).Watch(context.TODO(), options)
			},
		},
		&ioiv1.NodeStaticIOInfo{},
		resyncPeriod,
		indexers,
	)
}

func (f *nodeStaticIOInfoInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredNodeStaticIOInfoInformer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *nodeStaticIOInfoInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&ioiv1.NodeStaticIOInfo{}, f.defaultInformer)
}

func (f *nodeStaticIOInfoInformer) Lister() v1.NodeStaticIOInfoLister {
	return v1.NewNodeStaticIOInfoLister(f.Informer().GetIndexer())
}

/*
Copyright (C) 2025 Intel Corporation
SPDX-License-Identifier: Apache-2.0
*/

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: pkg/api/aggregator/aggregator.proto

package aggregator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IOAggregator4AgentClient is the client API for IOAggregator4Agent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IOAggregator4AgentClient interface {
	// UpdateNodeStatus updates the node's actual IO status
	UpdateNodeIOStatus(ctx context.Context, in *UpdateNodeIOStatusRequest, opts ...grpc.CallOption) (*Empty, error)
	// GetReservedPods returns the pod list to node agent
	GetReservedPods(ctx context.Context, in *GetReservedPodsRequest, opts ...grpc.CallOption) (*GetReservedPodsResponse, error)
}

type iOAggregator4AgentClient struct {
	cc grpc.ClientConnInterface
}

func NewIOAggregator4AgentClient(cc grpc.ClientConnInterface) IOAggregator4AgentClient {
	return &iOAggregator4AgentClient{cc}
}

func (c *iOAggregator4AgentClient) UpdateNodeIOStatus(ctx context.Context, in *UpdateNodeIOStatusRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/aggregator.IOAggregator4Agent/UpdateNodeIOStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iOAggregator4AgentClient) GetReservedPods(ctx context.Context, in *GetReservedPodsRequest, opts ...grpc.CallOption) (*GetReservedPodsResponse, error) {
	out := new(GetReservedPodsResponse)
	err := c.cc.Invoke(ctx, "/aggregator.IOAggregator4Agent/GetReservedPods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IOAggregator4AgentServer is the server API for IOAggregator4Agent service.
// All implementations must embed UnimplementedIOAggregator4AgentServer
// for forward compatibility
type IOAggregator4AgentServer interface {
	// UpdateNodeStatus updates the node's actual IO status
	UpdateNodeIOStatus(context.Context, *UpdateNodeIOStatusRequest) (*Empty, error)
	// GetReservedPods returns the pod list to node agent
	GetReservedPods(context.Context, *GetReservedPodsRequest) (*GetReservedPodsResponse, error)
	mustEmbedUnimplementedIOAggregator4AgentServer()
}

// UnimplementedIOAggregator4AgentServer must be embedded to have forward compatible implementations.
type UnimplementedIOAggregator4AgentServer struct {
}

func (UnimplementedIOAggregator4AgentServer) UpdateNodeIOStatus(context.Context, *UpdateNodeIOStatusRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNodeIOStatus not implemented")
}
func (UnimplementedIOAggregator4AgentServer) GetReservedPods(context.Context, *GetReservedPodsRequest) (*GetReservedPodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReservedPods not implemented")
}
func (UnimplementedIOAggregator4AgentServer) mustEmbedUnimplementedIOAggregator4AgentServer() {}

// UnsafeIOAggregator4AgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IOAggregator4AgentServer will
// result in compilation errors.
type UnsafeIOAggregator4AgentServer interface {
	mustEmbedUnimplementedIOAggregator4AgentServer()
}

func RegisterIOAggregator4AgentServer(s grpc.ServiceRegistrar, srv IOAggregator4AgentServer) {
	s.RegisterService(&IOAggregator4Agent_ServiceDesc, srv)
}

func _IOAggregator4Agent_UpdateNodeIOStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNodeIOStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IOAggregator4AgentServer).UpdateNodeIOStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aggregator.IOAggregator4Agent/UpdateNodeIOStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IOAggregator4AgentServer).UpdateNodeIOStatus(ctx, req.(*UpdateNodeIOStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IOAggregator4Agent_GetReservedPods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReservedPodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IOAggregator4AgentServer).GetReservedPods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aggregator.IOAggregator4Agent/GetReservedPods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IOAggregator4AgentServer).GetReservedPods(ctx, req.(*GetReservedPodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IOAggregator4Agent_ServiceDesc is the grpc.ServiceDesc for IOAggregator4Agent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IOAggregator4Agent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aggregator.IOAggregator4Agent",
	HandlerType: (*IOAggregator4AgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateNodeIOStatus",
			Handler:    _IOAggregator4Agent_UpdateNodeIOStatus_Handler,
		},
		{
			MethodName: "GetReservedPods",
			Handler:    _IOAggregator4Agent_GetReservedPods_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/aggregator/aggregator.proto",
}

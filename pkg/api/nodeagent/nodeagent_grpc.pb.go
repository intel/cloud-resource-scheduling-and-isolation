/*
Copyright (C) 2025 Intel Corporation
SPDX-License-Identifier: Apache-2.0
*/

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: pkg/api/nodeagent/nodeagent.proto

package nodeagent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	aggregator "sigs.k8s.io/IOIsolation/pkg/api/aggregator"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NodeAgentClient is the client API for NodeAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeAgentClient interface {
	// UpdateReservedPod bounds/unbounds pod to node
	UpdateReservedPods(ctx context.Context, in *UpdateReservedPodsRequest, opts ...grpc.CallOption) (*aggregator.Empty, error)
	// GetNodeIOStatuses returns the aggregated actual nodes' IO statuses to clients
	GetNodeIOStatus(ctx context.Context, in *GetNodeIOStatusRequest, opts ...grpc.CallOption) (*GetNodeIOStatusResponse, error)
}

type nodeAgentClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeAgentClient(cc grpc.ClientConnInterface) NodeAgentClient {
	return &nodeAgentClient{cc}
}

func (c *nodeAgentClient) UpdateReservedPods(ctx context.Context, in *UpdateReservedPodsRequest, opts ...grpc.CallOption) (*aggregator.Empty, error) {
	out := new(aggregator.Empty)
	err := c.cc.Invoke(ctx, "/nodeagent.NodeAgent/UpdateReservedPods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeAgentClient) GetNodeIOStatus(ctx context.Context, in *GetNodeIOStatusRequest, opts ...grpc.CallOption) (*GetNodeIOStatusResponse, error) {
	out := new(GetNodeIOStatusResponse)
	err := c.cc.Invoke(ctx, "/nodeagent.NodeAgent/GetNodeIOStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeAgentServer is the server API for NodeAgent service.
// All implementations must embed UnimplementedNodeAgentServer
// for forward compatibility
type NodeAgentServer interface {
	// UpdateReservedPod bounds/unbounds pod to node
	UpdateReservedPods(context.Context, *UpdateReservedPodsRequest) (*aggregator.Empty, error)
	// GetNodeIOStatuses returns the aggregated actual nodes' IO statuses to clients
	GetNodeIOStatus(context.Context, *GetNodeIOStatusRequest) (*GetNodeIOStatusResponse, error)
	mustEmbedUnimplementedNodeAgentServer()
}

// UnimplementedNodeAgentServer must be embedded to have forward compatible implementations.
type UnimplementedNodeAgentServer struct {
}

func (UnimplementedNodeAgentServer) UpdateReservedPods(context.Context, *UpdateReservedPodsRequest) (*aggregator.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReservedPods not implemented")
}
func (UnimplementedNodeAgentServer) GetNodeIOStatus(context.Context, *GetNodeIOStatusRequest) (*GetNodeIOStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeIOStatus not implemented")
}
func (UnimplementedNodeAgentServer) mustEmbedUnimplementedNodeAgentServer() {}

// UnsafeNodeAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeAgentServer will
// result in compilation errors.
type UnsafeNodeAgentServer interface {
	mustEmbedUnimplementedNodeAgentServer()
}

func RegisterNodeAgentServer(s grpc.ServiceRegistrar, srv NodeAgentServer) {
	s.RegisterService(&NodeAgent_ServiceDesc, srv)
}

func _NodeAgent_UpdateReservedPods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReservedPodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeAgentServer).UpdateReservedPods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodeagent.NodeAgent/UpdateReservedPods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeAgentServer).UpdateReservedPods(ctx, req.(*UpdateReservedPodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeAgent_GetNodeIOStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeIOStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeAgentServer).GetNodeIOStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodeagent.NodeAgent/GetNodeIOStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeAgentServer).GetNodeIOStatus(ctx, req.(*GetNodeIOStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeAgent_ServiceDesc is the grpc.ServiceDesc for NodeAgent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeAgent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nodeagent.NodeAgent",
	HandlerType: (*NodeAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateReservedPods",
			Handler:    _NodeAgent_UpdateReservedPods_Handler,
		},
		{
			MethodName: "GetNodeIOStatus",
			Handler:    _NodeAgent_GetNodeIOStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/nodeagent/nodeagent.proto",
}

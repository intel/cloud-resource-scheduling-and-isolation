/*
Copyright (C) 2025 Intel Corporation
SPDX-License-Identifier: Apache-2.0
*/

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: pkg/api/ioiservice/ioisolation.proto

package ioiservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IoiserviceClient is the client API for Ioiservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IoiserviceClient interface {
	Configure(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*ConfigureResponse, error)
	GetServiceInfo(ctx context.Context, in *ServiceInfoRequest, opts ...grpc.CallOption) (*ServiceInfoResponse, error)
	SetAppLimit(ctx context.Context, in *SetAppLimitRequest, opts ...grpc.CallOption) (*SetAppLimitResponse, error)
	GetAppLimit(ctx context.Context, in *GetAppLimitRequest, opts ...grpc.CallOption) (*GetAppLimitResponse, error)
	RegisterApp(ctx context.Context, in *RegisterAppRequest, opts ...grpc.CallOption) (*RegisterAppResponse, error)
	UnRegisterApp(ctx context.Context, in *UnRegisterAppRequest, opts ...grpc.CallOption) (*UnRegisterAppResponse, error)
	Subscribe(ctx context.Context, in *SubscribeContext, opts ...grpc.CallOption) (Ioiservice_SubscribeClient, error)
}

type ioiserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewIoiserviceClient(cc grpc.ClientConnInterface) IoiserviceClient {
	return &ioiserviceClient{cc}
}

func (c *ioiserviceClient) Configure(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*ConfigureResponse, error) {
	out := new(ConfigureResponse)
	err := c.cc.Invoke(ctx, "/ioiservice/Configure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ioiserviceClient) GetServiceInfo(ctx context.Context, in *ServiceInfoRequest, opts ...grpc.CallOption) (*ServiceInfoResponse, error) {
	out := new(ServiceInfoResponse)
	err := c.cc.Invoke(ctx, "/ioiservice/GetServiceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ioiserviceClient) SetAppLimit(ctx context.Context, in *SetAppLimitRequest, opts ...grpc.CallOption) (*SetAppLimitResponse, error) {
	out := new(SetAppLimitResponse)
	err := c.cc.Invoke(ctx, "/ioiservice/SetAppLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ioiserviceClient) GetAppLimit(ctx context.Context, in *GetAppLimitRequest, opts ...grpc.CallOption) (*GetAppLimitResponse, error) {
	out := new(GetAppLimitResponse)
	err := c.cc.Invoke(ctx, "/ioiservice/GetAppLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ioiserviceClient) RegisterApp(ctx context.Context, in *RegisterAppRequest, opts ...grpc.CallOption) (*RegisterAppResponse, error) {
	out := new(RegisterAppResponse)
	err := c.cc.Invoke(ctx, "/ioiservice/RegisterApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ioiserviceClient) UnRegisterApp(ctx context.Context, in *UnRegisterAppRequest, opts ...grpc.CallOption) (*UnRegisterAppResponse, error) {
	out := new(UnRegisterAppResponse)
	err := c.cc.Invoke(ctx, "/ioiservice/UnRegisterApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ioiserviceClient) Subscribe(ctx context.Context, in *SubscribeContext, opts ...grpc.CallOption) (Ioiservice_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Ioiservice_ServiceDesc.Streams[0], "/ioiservice/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &ioiserviceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Ioiservice_SubscribeClient interface {
	Recv() (*AppsBandwidth, error)
	grpc.ClientStream
}

type ioiserviceSubscribeClient struct {
	grpc.ClientStream
}

func (x *ioiserviceSubscribeClient) Recv() (*AppsBandwidth, error) {
	m := new(AppsBandwidth)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IoiserviceServer is the server API for Ioiservice service.
// All implementations must embed UnimplementedIoiserviceServer
// for forward compatibility
type IoiserviceServer interface {
	Configure(context.Context, *ConfigureRequest) (*ConfigureResponse, error)
	GetServiceInfo(context.Context, *ServiceInfoRequest) (*ServiceInfoResponse, error)
	SetAppLimit(context.Context, *SetAppLimitRequest) (*SetAppLimitResponse, error)
	GetAppLimit(context.Context, *GetAppLimitRequest) (*GetAppLimitResponse, error)
	RegisterApp(context.Context, *RegisterAppRequest) (*RegisterAppResponse, error)
	UnRegisterApp(context.Context, *UnRegisterAppRequest) (*UnRegisterAppResponse, error)
	Subscribe(*SubscribeContext, Ioiservice_SubscribeServer) error
	mustEmbedUnimplementedIoiserviceServer()
}

// UnimplementedIoiserviceServer must be embedded to have forward compatible implementations.
type UnimplementedIoiserviceServer struct {
}

func (UnimplementedIoiserviceServer) Configure(context.Context, *ConfigureRequest) (*ConfigureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Configure not implemented")
}
func (UnimplementedIoiserviceServer) GetServiceInfo(context.Context, *ServiceInfoRequest) (*ServiceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceInfo not implemented")
}
func (UnimplementedIoiserviceServer) SetAppLimit(context.Context, *SetAppLimitRequest) (*SetAppLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAppLimit not implemented")
}
func (UnimplementedIoiserviceServer) GetAppLimit(context.Context, *GetAppLimitRequest) (*GetAppLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppLimit not implemented")
}
func (UnimplementedIoiserviceServer) RegisterApp(context.Context, *RegisterAppRequest) (*RegisterAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterApp not implemented")
}
func (UnimplementedIoiserviceServer) UnRegisterApp(context.Context, *UnRegisterAppRequest) (*UnRegisterAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnRegisterApp not implemented")
}
func (UnimplementedIoiserviceServer) Subscribe(*SubscribeContext, Ioiservice_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedIoiserviceServer) mustEmbedUnimplementedIoiserviceServer() {}

// UnsafeIoiserviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IoiserviceServer will
// result in compilation errors.
type UnsafeIoiserviceServer interface {
	mustEmbedUnimplementedIoiserviceServer()
}

func RegisterIoiserviceServer(s grpc.ServiceRegistrar, srv IoiserviceServer) {
	s.RegisterService(&Ioiservice_ServiceDesc, srv)
}

func _Ioiservice_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IoiserviceServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ioiservice/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IoiserviceServer).Configure(ctx, req.(*ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ioiservice_GetServiceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IoiserviceServer).GetServiceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ioiservice/GetServiceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IoiserviceServer).GetServiceInfo(ctx, req.(*ServiceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ioiservice_SetAppLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAppLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IoiserviceServer).SetAppLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ioiservice/SetAppLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IoiserviceServer).SetAppLimit(ctx, req.(*SetAppLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ioiservice_GetAppLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IoiserviceServer).GetAppLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ioiservice/GetAppLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IoiserviceServer).GetAppLimit(ctx, req.(*GetAppLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ioiservice_RegisterApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IoiserviceServer).RegisterApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ioiservice/RegisterApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IoiserviceServer).RegisterApp(ctx, req.(*RegisterAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ioiservice_UnRegisterApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnRegisterAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IoiserviceServer).UnRegisterApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ioiservice/UnRegisterApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IoiserviceServer).UnRegisterApp(ctx, req.(*UnRegisterAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ioiservice_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeContext)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IoiserviceServer).Subscribe(m, &ioiserviceSubscribeServer{stream})
}

type Ioiservice_SubscribeServer interface {
	Send(*AppsBandwidth) error
	grpc.ServerStream
}

type ioiserviceSubscribeServer struct {
	grpc.ServerStream
}

func (x *ioiserviceSubscribeServer) Send(m *AppsBandwidth) error {
	return x.ServerStream.SendMsg(m)
}

// Ioiservice_ServiceDesc is the grpc.ServiceDesc for Ioiservice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ioiservice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ioiservice",
	HandlerType: (*IoiserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Configure",
			Handler:    _Ioiservice_Configure_Handler,
		},
		{
			MethodName: "GetServiceInfo",
			Handler:    _Ioiservice_GetServiceInfo_Handler,
		},
		{
			MethodName: "SetAppLimit",
			Handler:    _Ioiservice_SetAppLimit_Handler,
		},
		{
			MethodName: "GetAppLimit",
			Handler:    _Ioiservice_GetAppLimit_Handler,
		},
		{
			MethodName: "RegisterApp",
			Handler:    _Ioiservice_RegisterApp_Handler,
		},
		{
			MethodName: "UnRegisterApp",
			Handler:    _Ioiservice_UnRegisterApp_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Ioiservice_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/api/ioiservice/ioisolation.proto",
}
